@startuml





/' Objects '/

class App {
	+pause : bool
	+bodies_system : std::shared_ptr<CelestialBodySystem>
	+bake(const char* json_filename) : void
	+main_loop(const char* json_filename) : void
	+process_input(float delta_t) : void
	+process_input_real_time_mode(float delta_t) : void
	+render_loop(const char* json_filename) : void
}


class CelestialBody {
	+CelestialBody(double mass, const glm::vec3& velocity, const glm::vec3& pos)
	+is_colliding(const CelestialBody& other) : bool {query}
	+merged : bool
	#_mass : double
	+mass() : double {query}
	#_radius : float
	+radius() : float {query}
	+mat : glm::mat4
	#_color : glm::vec3
	+calculate_acceleration_vec(const CelestialBody& other) : glm::vec3 {query}
	+calculate_acceleration_vec(const glm::vec3& pos, double mass) : glm::vec3 {query}
	+color() : glm::vec3 {query}
	+pos : glm::vec3
	+velocity : glm::vec3
	+merge(std::shared_ptr<CelestialBody> other) : void
	+set_mass(double mass) : void
	+update_matrix() : void
	+update_values() : void
}


class CelestialBodySystem {
	+CelestialBodySystem()
	+~CelestialBodySystem()
	+octree : OcTree
	+sphere : Sphere
	+get_shader() : axolote::gl::Shader {query}
	-instanced_colors_vbo : axolote::gl::VBO
	-instanced_matrices_vbo : axolote::gl::VBO
	+add_body(double mass, glm::vec3 pos, glm::vec3 vel) : std::shared_ptr<CelestialBody>
	-_celestial_bodies : std::vector<std::shared_ptr<CelestialBody>>
	+celestial_bodies() : std::vector<std::shared_ptr<CelestialBody>> {query}
	+barnes_hut_algorithm(double dt) : void
	+bind_shader(const axolote::gl::Shader& shader_program) : void
	-build_octree() : void
	+draw() : void
	+draw(const glm::mat4& mat) : void
	+naive_algorithm(double dt) : void
	+setup_instanced_vbo() : void
	+setup_using_baked_frame_json(nlohmann::json& data) : void
	+setup_using_json(nlohmann::json& data) : void
	+update(double dt) : void
	+update_vbos() : void
}


class OcTree {
	+OcTree()
	+OcTree(float initial_coord)
	+initial_coord : float
	+initial_width : float
	+net_acceleration_on_body(std::shared_ptr<CelestialBody> body, double dt) : glm::vec3
	+{static} theta : static double
	+root : std::unique_ptr<Node>
	+insert(const std::shared_ptr<CelestialBody>& body) : void
}


class OcTree::Node {
	+Node()
	+Node(glm::vec3 cube_start, float width)
	+is_leaf : bool
	-should_be_called(const std::shared_ptr<CelestialBody>& other) : bool {query}
	+ratio_width_distance(const glm::vec3& pos) : double {query}
	+total_mass : double
	+width : float
	+center_of_mass : glm::vec3
	+cube_start : glm::vec3
	+net_acceleration_on_body(std::shared_ptr<CelestialBody> body, double dt) : glm::vec3
	+operator<<(std::ostream& os, Node node) : std :: ostream&
	+operator<<(std::ostream& os, std::unique_ptr<Node>& node) : std :: ostream&
	+body : std::shared_ptr<CelestialBody>
	+lbb : std::unique_ptr<Node>
	+lbf : std::unique_ptr<Node>
	+lub : std::unique_ptr<Node>
	+luf : std::unique_ptr<Node>
	+rbb : std::unique_ptr<Node>
	+rbf : std::unique_ptr<Node>
	+rub : std::unique_ptr<Node>
	+ruf : std::unique_ptr<Node>
	+find_correct_child(const glm::vec3& pos) : std::unique_ptr<Node>&
	+insert(const std::shared_ptr<CelestialBody>& body) : void
	+split() : void
}


class Sphere {
	+Sphere()
	+indices_ebo : axolote::gl::EBO
	+get_shader() : axolote::gl::Shader {query}
	-shader : axolote::gl::Shader
	+vao : axolote::gl::VAO
	+vertices_vbo : axolote::gl::VBO
	-_indices : std::vector<GLuint>
	+indices() : std::vector<GLuint> {query}
	-_vertices : std::vector<glm::vec3>
	+bind_shader(const axolote::gl::Shader& shader_program) : void
	+draw() : void
	+draw(const glm::mat4& mat) : void
	+update(double dt) : void
}





/' Inheritance relationships '/




/' Aggregation relationships '/

App *-- CelestialBodySystem


CelestialBodySystem *-- CelestialBody


CelestialBodySystem *-- OcTree


CelestialBodySystem *-- Sphere


OcTree::Node *-- CelestialBody






/' Nested objects '/

OcTree +-- OcTree::Node




@enduml
